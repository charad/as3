/** ******************************** * Class Information * @author	D'Haenens Arnor * @since	Jul 19, 2011, at 8:42:33 PM ******************************** **/package be.arnordhaenens.views.components.home{		/**	 * Imports	 **/		import be.arnordhaenens.events.ComponentEvent;	import be.arnordhaenens.filters.ArnorFilterClass;	import be.arnordhaenens.views.components.loaders.BufferProgressComponent;		import com.greensock.TweenLite;	import com.greensock.TweenMax;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.LoaderMax;	import com.greensock.loading.VideoLoader;	import com.greensock.loading.display.ContentDisplay;	import com.greensock.plugins.BlurFilterPlugin;		import flash.display.ColorCorrection;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.AsyncErrorEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.NetStatusEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.events.StatusEvent;	import flash.events.TimerEvent;	import flash.filters.ColorMatrixFilter;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.net.URLRequest;	import flash.utils.Timer;		import nl.demonsters.debugger.MonsterDebugger;
			/**	 * Class	HomeView	 * @author	D'Haenens Arnor	 * @since	@since	Jul 19, 2011, at 8:42:33 PM	 * @see		be.arnordhaenens.views.components.home.HomeView	 **/	public class HomeView extends Sprite	{		/**		 * Variables		 **/				//video		private var _available:Boolean;		private var _video:Video;		private var _nt:NetConnection;		private var _ns:NetStream;		private static const VIDEO:String = "assets/originals/video/video-54027939.mp4";		private static const VIDEO2:String = "assets/originals/video/video-55536809.mp4";		private static const VIDEO3:String = "assets/originals/video/video-34506207.mp4";		private var _videoArray:Array = new Array(VIDEO, VIDEO2, VIDEO3);				private var _duration:Number;				private var _firsttick:Boolean = false;				private var timer:Timer;				//components		private var _hbutton:HomeButton;		private var _progress_buffer:BufferProgressComponent;				/**		 * Constructor		 **/		public function HomeView()		{			super();						//add event listener			this.addEventListener(Event.ADDED_TO_STAGE, init);				}				////		////////////////////////////////		// Public functions		////////////////////////////////		////				/**		 * Handle stage / window resize		 **/		public function handleResize():void		{			//resize the video			var rfactor:Number = Math.max(this.stage.stageHeight / this._video.height, this.stage.stageWidth / this._video.width);			this._video.height *= rfactor;			this._video.width *=rfactor;						if(this.contains(this._progress_buffer))				this._progress_buffer.handleResize();		}				/**		 * Remove the home view		 **/		public function removeHomeView():void		{			timer = new Timer(100,10);			timer.addEventListener(TimerEvent.TIMER_COMPLETE, handleTimerComplete);			timer.addEventListener(TimerEvent.TIMER, handleTimerProgress);			timer.start();		}				////		////////////////////////////////		// Protected functions		////////////////////////////////		////				////		////////////////////////////////		// Private functions		////////////////////////////////		////				/**		 * Get random video		 **/		private function getRandomVideo():int		{			var vi:Number = Math.random();			var index:int;						if(vi <= (1/3))				index=0;			else if(vi > (1/3) && vi <= (2/3))				index=1;			else if(vi > 2/3)				index=2;						return index;		}				/**		 * Create the stage video		 * 		 * Check if StageVideo is available,		 * if not, use Video as fallback		 **/		private function createStageVideo():void		{			//due to problems with the stagevideo import			//fallback to basic video component			this._video = new Video();			this._video.x = this._video.y = 0;			this._video.width = this.stage.stageWidth;			this._video.height = this.stage.stageHeight;						//create black and white filter			this._video.filters = [ArnorFilterClass.createBWFilter()];						this.addChild(_video);						//create new netconnection			//add event listeners			//create new instance of netconnection			_nt = new NetConnection();			_nt.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityError);			_nt.addEventListener(NetStatusEvent.NET_STATUS, handleNetStatus);			_nt.connect(null);		}						/**		 * When netconnection is 'available'		 * Create new netstream		 * Add event listeners to the netstream		 * Attach netstream to the video object		 **/		private function connectVideo():void		{			//create new netstream			this._ns = new NetStream(_nt);			this._ns.inBufferSeek = true;						//add event listeners to the netstream			this._ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, handleAsyncError);			this._ns.addEventListener(NetStatusEvent.NET_STATUS, handleNetStatus);			this._ns.addEventListener(IOErrorEvent.IO_ERROR, handleIOError);			this.addEventListener(Event.ENTER_FRAME, handleEnterFrame);						//attach netstream to the video component			this._video.attachNetStream(this._ns);						//object for metadata			//attach the object to the netstream object			var customClient:Object = new Object();			customClient.onMetaData = metaHandler;			this._ns.client = customClient;								//start playing / loading the video			this._ns.play(this._videoArray[this.getRandomVideo()]);						//get the random index			//MonsterDebugger.trace(this, this.getRandomVideo());		}				/**		 * Create the home button		 **/		private function createHomeButton():void		{			//create new instance			this._hbutton = new HomeButton();						//add to the sprite			this.addChild(this._hbutton);		}				/**		 * Create the Buffer / Progress bar		 **/		private function createBufferProgressBar():void		{			//create new instance			this._progress_buffer = new BufferProgressComponent();						//add child			this.addChild(this._progress_buffer);		}				/**		 * Bring the basic website controls back to the front		 **/		private function brinBasicsToFront():void		{			//bring artevelde logo back to front			this.parent.addChild(this.parent.getChildByName("arteveldelogo"));						//bring footer back to front			this.parent.addChild(this.parent.getChildByName("footer"));						//bring menu back to front			this.parent.addChild(this.parent.getChildByName("menu"));		}				////		////////////////////////////////		// Private event handlers		////////////////////////////////		////				/**		 * Init function		 * 		 * When the view is added to the stage		 * Create the video		 * Create the home button (optional)		 * Create the buffer progress bar		 * Bring footer, menu and arteveldelogo back to the front		 **/		private function init(evt:Event):void		{			//remove event listener			this.removeEventListener(Event.ADDED_TO_STAGE, init);						//create stage video background			//create home button			createStageVideo();				//createHomeButton();			createBufferProgressBar();						//bring the basic site components back to the front			brinBasicsToFront();		}				/**		 * Handles IOError of the video component		 **/		private function handleIOError(evt:IOErrorEvent):void		{			MonsterDebugger.trace(this, "home video ioerror");		}				/**		 * Handle video netstatus 		 **/		private function handleNetStatus(evt:NetStatusEvent):void		{			switch(evt.info.code)			{				case "NetConnection.Connect.Success":					connectVideo();					//MonsterDebugger.trace(this, "connected");					break;								case "NetStream.Play.StreamNotFound":					MonsterDebugger.trace(this, "can't locate video");					break;								case "NetStream.Play.Stop":					//restart the netstream					//get a random index					this._ns.play(this._videoArray[this.getRandomVideo()]);					break;			}		}				/**		 * handle netstream status event		 **/		private function handleSecurityError(evt:SecurityErrorEvent):void		{			MonsterDebugger.trace(this, "security error");		}				private function handleAsyncError(evt:AsyncErrorEvent):void		{			MonsterDebugger.trace(this, "AsyncError");		}				/**		 * On video metadata		 **/		private function metaHandler(infoObject:Object):void		{			//MonsterDebugger.trace(this, infoObject);						//set the duration of the video file			this._duration = infoObject.duration as Number;		}				/**		 * Handle Enter Frame		 * 		 * Check the loaded percentage of the movie		 **/		private function handleEnterFrame(evt:Event):void		{			var perc:Number = this._ns.bytesLoaded / this._ns.bytesTotal;			//MonsterDebugger.trace(this, "loading video: " + perc);						/*if(perc == 1)				this.removeEventListener(Event.ENTER_FRAME, handleEnterFrame);*/						this._progress_buffer.updateBufferBar(this._ns.bytesLoaded, this._ns.bytesTotal);			this._progress_buffer.updateProgressIndicator(this._duration, this._ns.time);		}				/**		 * Timer Progress		 **/		private function handleTimerProgress(evt:TimerEvent):void		{			if(this._firsttick == false)			{				this._firsttick = true;								this.removeEventListener(Event.ENTER_FRAME, handleEnterFrame);				TweenLite.to(this._video, 1, {alpha:0});			}						//lower the volume with 10%			this._ns.soundTransform = new SoundTransform(this._ns.soundTransform.volume - .1);		}				/**		 * Timer complete		 **/		private function handleTimerComplete(evt:TimerEvent):void		{			//clear ns			this._ns.pause();			this._ns.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, handleAsyncError);			this._ns.removeEventListener(NetStatusEvent.NET_STATUS, handleNetStatus);			this._ns.removeEventListener(IOErrorEvent.IO_ERROR, handleIOError);			this._ns = null;						//clear nt			_nt.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityError);			_nt.removeEventListener(NetStatusEvent.NET_STATUS, handleNetStatus);			this._nt = null;						//remove video			this.removeChild(this._video);						//clear timer			timer.removeEventListener(TimerEvent.TIMER, handleTimerProgress);			timer.removeEventListener(TimerEvent.TIMER_COMPLETE, handleTimerComplete);			timer = null;						//remove enter frame			this.removeEventListener(Event.ENTER_FRAME, handleEnterFrame);					//dispatch removed			dispatchEvent(new ComponentEvent(ComponentEvent.REMOVED));		}	}}