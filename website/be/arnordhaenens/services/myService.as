package be.arnordhaenens.services{	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.net.NetConnection;	import flash.net.ObjectEncoding;	import flash.net.Responder;		import nl.demonsters.debugger.MonsterDebugger;		import org.robotlegs.mvcs.Actor;
	/**	 * Class	myService	 **/	public class myService extends Actor	{		/**		 * Variables		 **/		protected const GATEWAY:String = "http://arnor.be/promosite/public/index.php/gateway/amf";		protected var connection:NetConnection;		protected var responder:Responder;				/**		 * Constructor		 **/		public function myService()		{			//create new netconnection			connection = new NetConnection();						//add eventlisteners to the netconnection			connection.addEventListener(Event.ACTIVATE, handleActivate);			connection.addEventListener(Event.DEACTIVATE, handleDeactivate);			connection.addEventListener(IOErrorEvent.IO_ERROR, handleIOError);			connection.addEventListener(NetStatusEvent.NET_STATUS, handleNetStatus);			connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityError);						//set the object encoding			connection.objectEncoding = ObjectEncoding.AMF3;						//connect to the GATEWAY constant			connection.connect(GATEWAY);		}				protected function handleActivate(evt:Event):void		{			//MonsterDebugger.trace(this,"activated service");		}				protected function handleDeactivate(evt:Event):void		{			//MonsterDebugger.trace(this, "deactivate service");		}				protected function handleFault(fault:Object):void		{			MonsterDebugger.trace(this, fault);		}				protected function handleIOError(evt:IOErrorEvent):void		{			MonsterDebugger.trace(this,"IOError: " + evt.errorID);		}				protected function handleNetStatus(evt:NetStatusEvent):void		{			MonsterDebugger.trace(this, "netstatus service: " + evt.info);		}				protected function handleSecurityError(evt:SecurityErrorEvent):void		{			MonsterDebugger.trace(this, "SecurityError: " + evt.errorID);		}	}}